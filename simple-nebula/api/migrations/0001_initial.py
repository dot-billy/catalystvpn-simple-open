# Generated by Django 5.2 on 2025-04-02 14:24

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CertificateAuthority',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('ca_cert', models.TextField(verbose_name='CA certificate')),
                ('ca_key', models.TextField(verbose_name='CA private key')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('expires_at', models.DateTimeField(verbose_name='expires at')),
                ('revoked', models.BooleanField(default=False, verbose_name='revoked')),
                ('revoked_at', models.DateTimeField(blank=True, null=True, verbose_name='revoked at')),
            ],
            options={
                'verbose_name': 'certificate authority',
                'verbose_name_plural': 'certificate authorities',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('full_name', models.CharField(max_length=255, verbose_name='full name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
        ),
        migrations.CreateModel(
            name='Certificate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('cert_type', models.CharField(choices=[('node', 'Node'), ('lighthouse', 'Lighthouse')], max_length=20, verbose_name='certificate type')),
                ('cert', models.TextField(verbose_name='certificate')),
                ('key', models.TextField(verbose_name='private key')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('expires_at', models.DateTimeField(verbose_name='expires at')),
                ('revoked', models.BooleanField(default=False, verbose_name='revoked')),
                ('revoked_at', models.DateTimeField(blank=True, null=True, verbose_name='revoked at')),
                ('nebula_ip', models.GenericIPAddressField(protocol='IPv4', verbose_name='Nebula IP')),
                ('ca', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='certificates', to='api.certificateauthority')),
            ],
            options={
                'verbose_name': 'certificate',
                'verbose_name_plural': 'certificates',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Lighthouse',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('hostname', models.CharField(max_length=255, verbose_name='hostname')),
                ('nebula_ip', models.GenericIPAddressField(protocol='IPv4', unique=True, verbose_name='Nebula IP')),
                ('last_check_in', models.DateTimeField(blank=True, null=True, verbose_name='last check-in')),
                ('config', models.JSONField(default=dict, verbose_name='config')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('public_ip', models.GenericIPAddressField(verbose_name='public IP')),
                ('port', models.IntegerField(default=4242, verbose_name='port')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('certificate', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s', to='api.certificate')),
            ],
            options={
                'verbose_name': 'lighthouse',
                'verbose_name_plural': 'lighthouses',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Membership',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('operator', 'Operator'), ('viewer', 'Viewer')], default='viewer', max_length=20, verbose_name='role')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'membership',
                'verbose_name_plural': 'memberships',
                'ordering': ['organization', 'user'],
            },
        ),
        migrations.CreateModel(
            name='Node',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('hostname', models.CharField(max_length=255, verbose_name='hostname')),
                ('nebula_ip', models.GenericIPAddressField(protocol='IPv4', unique=True, verbose_name='Nebula IP')),
                ('last_check_in', models.DateTimeField(blank=True, null=True, verbose_name='last check-in')),
                ('config', models.JSONField(default=dict, verbose_name='config')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('certificate', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s', to='api.certificate')),
                ('lighthouse', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='nodes', to='api.lighthouse')),
            ],
            options={
                'verbose_name': 'node',
                'verbose_name_plural': 'nodes',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='APIKey',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('key_hash', models.CharField(max_length=255, verbose_name='key hash')),
                ('entity_type', models.CharField(choices=[('node', 'Node'), ('lighthouse', 'Lighthouse')], max_length=20, verbose_name='entity type')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('expires_at', models.DateTimeField(blank=True, null=True, verbose_name='expires at')),
                ('last_used', models.DateTimeField(blank=True, null=True, verbose_name='last used')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('lighthouse', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_keys', to='api.lighthouse')),
                ('node', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='api_keys', to='api.node')),
            ],
            options={
                'verbose_name': 'API key',
                'verbose_name_plural': 'API keys',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('slug', models.SlugField(max_length=255, unique=True, verbose_name='slug')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('users', models.ManyToManyField(related_name='organizations', through='api.Membership', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'organization',
                'verbose_name_plural': 'organizations',
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='node',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.organization'),
        ),
        migrations.AddField(
            model_name='membership',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='api.organization'),
        ),
        migrations.AddField(
            model_name='lighthouse',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.organization'),
        ),
        migrations.AddField(
            model_name='certificateauthority',
            name='organization',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='certificate_authority', to='api.organization'),
        ),
        migrations.CreateModel(
            name='SecurityGroup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='security_groups', to='api.organization')),
            ],
            options={
                'verbose_name': 'security group',
                'verbose_name_plural': 'security groups',
                'ordering': ['name'],
                'unique_together': {('organization', 'name')},
            },
        ),
        migrations.AddField(
            model_name='node',
            name='security_groups',
            field=models.ManyToManyField(related_name='%(class)ss', to='api.securitygroup'),
        ),
        migrations.AddField(
            model_name='lighthouse',
            name='security_groups',
            field=models.ManyToManyField(related_name='%(class)ss', to='api.securitygroup'),
        ),
        migrations.AlterUniqueTogether(
            name='membership',
            unique_together={('user', 'organization')},
        ),
        migrations.AlterUniqueTogether(
            name='node',
            unique_together={('organization', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='lighthouse',
            unique_together={('organization', 'name')},
        ),
    ]
